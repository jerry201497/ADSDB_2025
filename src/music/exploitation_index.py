
import os, json
from pathlib import Path
from dotenv import load_dotenv
import boto3
import pandas as pd
import chromadb
from chromadb.utils import embedding_functions as ef

def s3():
    load_dotenv()
    return boto3.client(
        "s3",
        endpoint_url=os.getenv("MINIO_ENDPOINT", "http://localhost:9000"),
        aws_access_key_id=os.getenv("MINIO_ROOT_USER"),
        aws_secret_access_key=os.getenv("MINIO_ROOT_PASSWORD"),
    )

def download(bucket, key, local):
    Path(local).parent.mkdir(parents=True, exist_ok=True)
    s3().download_file(bucket, key, str(local))

def list_keys(bucket, prefix, exts=None):
    c = s3(); out=[]; token=None
    while True:
        resp = c.list_objects_v2(Bucket=bucket, Prefix=prefix, ContinuationToken=token) if token else c.list_objects_v2(Bucket=bucket, Prefix=prefix)
        for o in resp.get("Contents", []):
            k=o["Key"]
            if not exts or any(k.lower().endswith(e) for e in exts): out.append(k)
        token=resp.get("NextContinuationToken")
        if not token: break
    return out

def main():
    load_dotenv()
    b_tr = os.getenv("S3_BUCKET_TRUSTED","trusted_zone")

    download(b_tr, "music/tracks_qc.parquet", "cache/trusted/tracks_qc.parquet")
    df = pd.read_parquet("cache/trusted/tracks_qc.parquet")

    cover_keys = list_keys(b_tr, "music/covers_qc/", exts=[".png"])
    local_covers = []
    for k in cover_keys:
        p = Path("cache/trusted/covers_qc")/Path(k).name
        download(b_tr, k, p)
        local_covers.append(str(p))

    client = chromadb.PersistentClient(path="chroma_db")
    clip = ef.OpenCLIPEmbeddingFunction()
    col = client.get_or_create_collection("music_multimodal", embedding_function=clip)

    ids, docs, metas = [], [], []

    for i, r in df.iterrows():
        doc = f"track: {r['track_name']} artist: {r['artist_name']} album: {r.get('album_name','')} genres: {r.get('genre_unified','')}"
        ids.append(f"track::{i}")
        docs.append(doc)
        metas.append({"modality":"text","track":r['track_name'], "artist":r['artist_name'], "album":r.get('album_name','')})

    for p in local_covers:
        ids.append(f"cover::{Path(p).stem}")
        docs.append(f"album cover file: {Path(p).name}")
        metas.append({"modality":"image","filename":Path(p).name})

    if ids:
        col.upsert(ids=ids, documents=docs, metadatas=metas)
        print(f"=== Exploitation summary ===\\nIndexed {len(ids)} items into 'music_multimodal'")
    else:
        print("No items to index.")

if __name__ == "__main__":
    main()
