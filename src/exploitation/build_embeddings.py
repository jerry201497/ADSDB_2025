import os
import chromadb
from chromadb.utils.embedding_functions import OpenCLIPEmbeddingFunction
from dotenv import load_dotenv
from src.common.minio_client import get_s3
from tqdm import tqdm

load_dotenv()

TRUSTED_BUCKET = os.getenv("S3_BUCKET_TRUSTED", "trusted_zone")
CHROMA_DIR = os.getenv("CHROMADB_DIR", "./chroma_db")

client = chromadb.PersistentClient(path=CHROMA_DIR)

COLL_IMAGES = "images_embeddings"
COLL_TEXTS = "texts_embeddings"
COLL_CLIP = "clip_multimodal"

clip_ef = OpenCLIPEmbeddingFunction()

def _iter_s3(prefix):
    s3 = get_s3()
    bucket = s3.Bucket(TRUSTED_BUCKET)
    for obj in bucket.objects.filter(Prefix=prefix):
        if obj.key.endswith('/'):
            continue
        yield obj

def index_images():
    coll = client.get_or_create_collection(COLL_IMAGES, embedding_function=clip_ef)
    s3 = get_s3()
    for obj in tqdm(list(_iter_s3("images_qc/"))):
        if not obj.key.lower().endswith(".png"):
            continue
        coll.add(
            ids=[obj.key],
            metadatas=[{"s3_key": obj.key, "modality": "image"}],
            documents=[obj.key],
        )

def index_texts():
    coll = client.get_or_create_collection(COLL_TEXTS, embedding_function=clip_ef)
    s3 = get_s3()
    for obj in tqdm(list(_iter_s3("text_qc/"))):
        if not obj.key.lower().endswith(".txt"):
            continue
        body = s3.Object(TRUSTED_BUCKET, obj.key).get()['Body'].read().decode('utf-8', errors='ignore')
        coll.add(
            ids=[obj.key],
            metadatas=[{"s3_key": obj.key, "modality": "text"}],
            documents=[body],
        )

def build_multimodal_union():
    dst = client.get_or_create_collection(COLL_CLIP, embedding_function=clip_ef)
    for name in (COLL_IMAGES, COLL_TEXTS):
        src = client.get_or_create_collection(name, embedding_function=clip_ef)
        res = src.get()
        if res and res.get("ids"):
            dst.add(ids=res["ids"], metadatas=res["metadatas"], documents=res["documents"])

if __name__ == "__main__":
    index_images()
    index_texts()
    build_multimodal_union()
